// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyBasketStats.API.DbContexts;

#nullable disable

namespace MyBasketStats.API.Migrations
{
    [DbContext(typeof(MyBasketStatsContext))]
    [Migration("20230730012559_little_Structure-fix")]
    partial class little_Structurefix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MyBasketStats.API.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int>("HeightInCm")
                        .HasColumnType("int");

                    b.Property<int>("HeightInInches")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TotalStatsheetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TotalStatsheetId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChampionshipTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<int?>("FinalsMvpId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipTeamId");

                    b.HasIndex("ContractId");

                    b.HasIndex("FinalsMvpId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Statsheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("FreeThrowsAttempted")
                        .HasColumnType("int");

                    b.Property<int>("FreeThrowsMade")
                        .HasColumnType("int");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Rebounds")
                        .HasColumnType("int");

                    b.Property<int?>("SeasonId")
                        .HasColumnType("int");

                    b.Property<int>("Steals")
                        .HasColumnType("int");

                    b.Property<int>("ThreePointersAttempted")
                        .HasColumnType("int");

                    b.Property<int>("ThreePointersMade")
                        .HasColumnType("int");

                    b.Property<int>("TwoPointersAttempted")
                        .HasColumnType("int");

                    b.Property<int>("TwoPointersMade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Statsheets");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Player", b =>
                {
                    b.HasOne("MyBasketStats.API.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("MyBasketStats.API.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.HasOne("MyBasketStats.API.Entities.Statsheet", "TotalStatsheet")
                        .WithMany()
                        .HasForeignKey("TotalStatsheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("Team");

                    b.Navigation("TotalStatsheet");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Season", b =>
                {
                    b.HasOne("MyBasketStats.API.Entities.Team", "ChampionshipTeam")
                        .WithMany()
                        .HasForeignKey("ChampionshipTeamId");

                    b.HasOne("MyBasketStats.API.Entities.Contract", null)
                        .WithMany("Seasons")
                        .HasForeignKey("ContractId");

                    b.HasOne("MyBasketStats.API.Entities.Player", "FinalsMvp")
                        .WithMany()
                        .HasForeignKey("FinalsMvpId");

                    b.Navigation("ChampionshipTeam");

                    b.Navigation("FinalsMvp");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Statsheet", b =>
                {
                    b.HasOne("MyBasketStats.API.Entities.Player", null)
                        .WithMany("SeasonalStatsheets")
                        .HasForeignKey("PlayerId");

                    b.HasOne("MyBasketStats.API.Entities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Contract", b =>
                {
                    b.Navigation("Seasons");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Player", b =>
                {
                    b.Navigation("SeasonalStatsheets");
                });

            modelBuilder.Entity("MyBasketStats.API.Entities.Team", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
